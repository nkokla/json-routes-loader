#! /usr/bin/env node

// require('./load-env')

// TODO : For next step : Use this options :
// const argsp = require('args')
// const ora = require('ora')

const glob = require('glob')
const chalk = require('chalk')
const chokidar = require('chokidar')
const jsonfile = require('jsonfile')
const fs = require('fs-extra')

class Logger {
  _defaultLog(logFunc, ...arg) {
    if (console[logFunc]) return console[logFunc](...arg)
    return console.log(...arg)
  }
  log(..._mess) {
    const mess = _mess.map(entry =>
      typeof entry === 'string' ? `${chalk.yellow.bold('> ')}${entry}` : entry,
    )
    this._defaultLog('log', ...mess)
    return
  }
  warn(...mess) {
    this._defaultLog('warn', ...mess)
    return
  }
  error(...mess) {
    this._defaultLog('error', ...mess)
    return
  }
  success(...mess) {
    this._defaultLog('success', ...mess)
    return
  }
}

const srcRootPath = './public/data-routes/'
const srcDir = `${srcRootPath}routes/`
const srcExt = 'json'

const destFile = `${srcRootPath}/index.json`
const navFile = `${srcRootPath}/layout/index.json`
const navLayoutHeader = `${srcRootPath}/layout/layout-header.json`
const navLayoutFooter = `${srcRootPath}/layout/layout-footer.json`
const registerFile = jsonfile.readFileSync(destFile, { throws: false }) || {}

// -------------------
// -------------------

const registerPath = './public/routes/index.json'
const routesDir = './public/routes/'
const extendedData = {}

const globString = routesDir + `/**/*.${srcExt}`
const logger = new Logger()
const watcher = chokidar.watch(globString, {
  // ignored: /(^|[\/\\])\../,
  persistent: true,
})

watcher
  .on('add', path => log(`File ${path} has been added`))
  .on('change', path => log(`File ${path} has been changed`))
  .on('unlink', path => log(`File ${path} has been removed`))

const libRoot = require('app-root-path')
let appRoot = process.cwd()

logger.log(`Path ? :>`)
logger.log(`>> ${libRoot}`)
logger.log(`>> ${__dirname}`)
logger.log(`>> ${appRoot}`)

const routesFiles = glob
  .sync(globString)
  .filter(routeFile => routeFile !== registerPath)
logger.log('Routes =', routesFiles)
const register_ = routesFiles.reduce((acc, routeFile) => {
  const dataRoute = fs.readJsonSync(routeFile, { throws: false })
  const routeDef = dataRoute && dataRoute.route
  const routeUrl = routeDef && routeDef.path
  const routePreload = routeDef && routeDef.preload
  if (!routeUrl) {
    // TODO: Details error
    logger.log(`The file on '${routeFile}' do not have route data.`)
    return acc
  }
  if (acc[routeUrl]) {
    logger.log(
      `The route '${routeUrl}' has already been defined in the register. Data from the '${routeFile}' file will not be used.`,
    )
    return acc
  }

  const routeFilePath = routeFile.replace(/^.\/public/, '')

  return {
    ...acc,
    [routeUrl]: {
      path: routeFilePath,
      ...(routePreload && {
        payload: fs.readJsonSync(routeFile, { throws: false }),
      }),
    },
  }
}, {})
// routesFiles.forEach(routeFile => {
//   // TODO: For absolute URL ?
//   const dataRouteRaw = fs.readJsonSync(routeFile, { throws: false })
//   logger.log('ROUTE-->', routeFile, ' >>> ', dataRouteRaw)
// })
logger.log('register_ >>', register_)
// const registerValue = Object.entries(register_).reduce(
//   (acc, [url, filePath]) => {
//     return {
//       ...acc,
//       [url]: fs.readJsonSync(filePath, { throws: false }),
//     }
//   },
//   {},
// )
// console.log('registerValue >>', registerValue)

// -------------------
// -------------------

// ---------------
// Tool function :
// ---------------
const getRelativePath = fullPath => fullPath.replace(RegExp(`^${srcDir}`), '')
const getDestructuredPath = relativePath =>
  getRelativePath(relativePath)
    .replace(/\.json$/, '')
    .split('/')
const getRealmFromDestructuredPath = destructuredPath =>
  destructuredPath.length > 1 ? destructuredPath[0] : ''
const getFileNameFromDestructuredPath = destructuredPath =>
  destructuredPath.length > 1
    ? destructuredPath.slice(1).join('/')
    : destructuredPath[0]

let oldRegisterFile = {}

// -------------------
// -------------------
// -------------------
const oldRegister = fs.readJsonSync(registerPath, { throws: false })
if (JSON.stringify(oldRegister) !== JSON.stringify(register_)) {
  fs.writeJsonSync(registerPath, register_, { spaces: 2 })
} else {
  logger.log('NoDiff')
}
const tempRegister = fs.readJsonSync(registerPath, { throws: false })
logger.log('tempRegister', tempRegister)

logger.log('-- OK --')
process.exit(0)

// -------------------
// Register function :
// -------------------
const register = glob.sync(srcDir + `/**/*.${srcExt}`).reduce((acc, file) => {
  const routeData = jsonfile.readFileSync(file)
  if (!(routeData && routeData.route && routeData.route.path)) {
    console.log(
      chalk.black.bgYellow(' Warn > '),
      chalk.yellow(`The file in [${file}] do not have route.path property`),
    )
    return acc
  }

  const filePath = getRelativePath(file)
  const destructuredPath = getDestructuredPath(filePath)
  const realm = getRealmFromDestructuredPath(destructuredPath)
  const fileName = getFileNameFromDestructuredPath(destructuredPath)

  const path = routeData.route.path.replace(/^\//, '').replace(/\/$/, '')
  const url = `/${[]
    .concat(realm ? [realm] : [], path ? path.split('/') : [])
    .join('/')}`

  const searchType = 'data-set'
  const reg = RegExp(
    `(?:{{)(?<={{)(?:${searchType}::)((?:(?!}}).)*)(?:}})`,
    'g',
  )
  if (reg.test(url)) {
    reg.lastIndex = 0

    console.log(`>>>>> ${url}`)
    reg.lastIndex = 0
  }

  const dataSet = reg.test(url) && routeData.dataSet

  return {
    ...acc,
    [url]: {
      realm,
      fileName,
      filePath,
      ...(dataSet && { dataSet }),
    },
  }
}, {})

registerFile['register'] = register

// -------------------
// Nav function :
// -------------------
const nav = jsonfile.readFileSync(navFile)
const { mainNav, navData } = nav
const memoizeRegister = Object.entries(registerFile['register'])
nav['navData'] = Object.entries(navData).reduce(
  (acc, [name, menu]) => {
    const formatedMenu = Object.entries(menu).reduce(
      (acc, [filePath, menuValue]) => {
        const [url] = memoizeRegister.find(
          ([url, value]) => value.filePath === filePath,
        )
        if (!url) {
          console.log(
            `index-route error > '${filePath}' do not exist in register`,
          )
        }
        const urlPath = url.replace(/^\//, '').split('/')
        const computedUrl =
          menuValue.realm && urlPath.length > 1
            ? `/${[menuValue.realm].concat(urlPath.slice(1)).join('/')}`
            : url

        return {
          ...acc,
          [computedUrl]: menuValue,
        }
      },
      {},
    )
    return {
      ...acc,
      ...{ [name]: formatedMenu },
    }
  },
  { mainNav },
)
registerFile['nav'] = nav

// -------------------
// Layout function :
// -------------------
const layoutHeader = jsonfile.readFileSync(navLayoutHeader)
const layoutFooter = jsonfile.readFileSync(navLayoutFooter)
registerFile['layout'] = {
  layoutHeader,
  layoutFooter,
}

// -------------------
// Writing file :
// -------------------
if (JSON.stringify(registerFile) !== JSON.stringify(oldRegisterFile)) {
  oldRegisterFile = { ...registerFile }
  jsonfile.writeFileSync(destFile, registerFile, { spaces: 2 })
}

console.log('-- Register File is updated --')
